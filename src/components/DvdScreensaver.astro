---
interface Props {
    logoPath: string;
    opacity?: number;
}

const { logoPath = '', opacity = 0.1 } = Astro.props;
---

<style>
    .dvd-screensaver {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        z-index: -1;
        pointer-events: none;
        opacity: var(--screensaver-opacity);
    }
</style>

<script>
function initDvdScreensaver(screensaver: HTMLElement) {
    const logoPath = screensaver.dataset.logoPath;
    if (!logoPath) {
        console.error('Logo path is missing');
        return;
    }
    
    const dvdLogo = document.createElement('img');
    dvdLogo.src = logoPath;
    dvdLogo.alt = "DVD Logo";
    
    // Define logo dimensions once
    const logoWidth = 100;
    const logoHeight = 44;

    // Set up logo element with all styles
    Object.assign(dvdLogo.style, {
        position: 'absolute',
        width: `${logoWidth}px`,
        height: `${logoHeight}px`,
        pointerEvents: 'none',
        display: 'block',
        objectFit: 'contain',
        left: '0',
        top: '0',
        transformOrigin: 'center',
        filter: 'brightness(0) invert(1)'
    });
    
    screensaver.appendChild(dvdLogo);
    
    // Set initial position and velocity vectors
    let x = Math.random() * (window.innerWidth - logoWidth);
    let y = Math.random() * (window.innerHeight - logoHeight);
    const baseSpeed = 2;
    let dx = baseSpeed;
    let dy = baseSpeed;

    // Define vibrant base colors (in HSL)
    const colors = [
        { h: 0, s: 100, l: 55, name: 'Red' },      // Bright red
        { h: 120, s: 100, l: 45, name: 'Green' },  // Deep green
        { h: 230, s: 100, l: 55, name: 'Blue' },   // Vibrant blue
        { h: 55, s: 100, l: 60, name: 'Yellow' },  // Bright yellow
        { h: 290, s: 100, l: 65, name: 'Purple' }, // Vibrant purple
        { h: 190, s: 100, l: 65, name: 'Cyan' },   // Bright cyan
        { h: 322, s: 100, l: 60, name: 'Pink' }    // Hot pink
    ];
    
    let lastColorIndex = -1;  // Track the last color used

    // Function to generate vibrant colors
    function changeLogoColor() {
        // Get available colors excluding the last one used
        const availableIndices = colors.map((_, index) => index)
            .filter(index => index !== lastColorIndex);
        
        // Pick a random color from available ones
        const newColorIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
        const color = colors[newColorIndex];
        
        // Update last used color
        lastColorIndex = newColorIndex;
        
        // Apply the color with increased vibrancy
        dvdLogo.style.filter = `brightness(1.4) saturate(200%) 
            invert(1) sepia(100%) saturate(2500%) 
            hue-rotate(${color.h}deg) brightness(${color.l}%) saturate(${color.s}%)`;
    }

    // Set initial position and color
    dvdLogo.style.transform = `translate(${x}px, ${y}px)`;
    changeLogoColor();

    function updateLogoPosition() {
        // Update position vector
        x += dx;
        y += dy;

        const rightBound = window.innerWidth - logoWidth;
        const bottomBound = window.innerHeight - logoHeight;

        // Handle collisions
        if (x <= 0 || x >= rightBound) {
            dx = -dx;
            changeLogoColor();
        }
        if (y <= 0 || y >= bottomBound) {
            dy = -dy;
            changeLogoColor();
        }

        dvdLogo.style.transform = `translate(${x}px, ${y}px)`;
        requestAnimationFrame(updateLogoPosition);
    }

    // Track relative position as percentage
    let lastKnownWidth = window.innerWidth;
    let lastKnownHeight = window.innerHeight;

    // Handle window resize while maintaining relative position
    function handleResize() {
        const rightBound = window.innerWidth - logoWidth;
        const bottomBound = window.innerHeight - logoHeight;
        const relativeX = x / (lastKnownWidth - logoWidth);
        const relativeY = y / (lastKnownHeight - logoHeight);
        let positionChanged = false;

        // Update position maintaining relative position in viewport
        if (window.innerWidth !== lastKnownWidth) {
            x = relativeX * rightBound;
        }
        if (window.innerHeight !== lastKnownHeight) {
            y = relativeY * bottomBound;
        }

        // Handle boundary collisions
        if (x > rightBound) {
            x = rightBound - 1;
            dx = -Math.abs(dx);
            positionChanged = true;
        } else if (x < 0) {
            x = 1;
            dx = Math.abs(dx);
            positionChanged = true;
        }
        
        if (y > bottomBound) {
            y = bottomBound - 1;
            dy = -Math.abs(dy);
            positionChanged = true;
        } else if (y < 0) {
            y = 1;
            dy = Math.abs(dy);
            positionChanged = true;
        }

        dvdLogo.style.transform = `translate(${x}px, ${y}px)`;
        if (positionChanged) changeLogoColor();

        lastKnownWidth = window.innerWidth;
        lastKnownHeight = window.innerHeight;
    }

    // Initialize animation
    changeLogoColor();
    updateLogoPosition();
    window.addEventListener('resize', handleResize);

    // Clean up resize listener when component is destroyed
    document.addEventListener('astro:unmount', () => {
        window.removeEventListener('resize', handleResize);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    const screensaver = document.querySelector<HTMLElement>('.dvd-screensaver');
    if (screensaver) {
        initDvdScreensaver(screensaver);
    }
});
</script>

<div 
    class="dvd-screensaver" 
    data-logo-path={logoPath}
    style={`--screensaver-opacity: ${opacity}`}
></div>